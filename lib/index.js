import{addStyle,addStyleAlias,addStyleAliases,addStyleFunction,addStyles,colorSupport,functions,styles}from"./styles.js";import{errorConfig}from"./util.js";const config=new Proxy({colorSupport:colorSupport,optimizeStyles:{chain:!1,literal:!1},errors:errorConfig},{});const optimizeStyles=e=>e.replace(/(\x1b\[([0-9]|;|)+?m)+\x1b\[0m/,styles.reset);const crayonPrototype={styleCache:"",preserveCache:!1,config:config,colorSupport:colorSupport,instance(e,t){return buildCrayon(e,t)},clone(e,t){return buildCrayon(this.preserveCache,(e?this.clearCache():this.styleCache)+(t||""))},clearCache(){const e=this.styleCache;return this.preserveCache||(this.styleCache=""),e},strip(e){return e.replace(/\x1b\[[0-9]([0-9])?([0-9])?m/gi,"")}};const reloadStyles=()=>{for(const e in styles)Object.defineProperty(crayonPrototype,e,{configurable:!0,get(){return this.clone(!0,styles[e])}})};reloadStyles();const reloadFunctions=()=>{for(const e in functions)if(!e.startsWith("bg")){const t=`bg${e[0].toUpperCase()+e.slice(1)}`;const r=functions[e];let s=!1;const n=functions[t]||(s=!0,functions[e]);Object.defineProperties(crayonPrototype,{[e]:{configurable:!0,value(...e){const t=r(...e);return""!==t?this.clone(!0,t):this}},[t]:{configurable:!0,value(...e){s&&e.push(!0);const t=n(...e);return""!==t?this.clone(!0,t):this}}})}};reloadFunctions();const buildCrayon=(e,t)=>{const n=function(...e){if(!e.length)return buildCrayon(!0);if(Array.isArray(e[0].raw)){const r=compileLiteral(...e);return n.config.optimizeStyles.literal?optimizeStyles(r):r}const t=String(e.join(" "));const s=n.clearCache();if(!s)return t;const r=s+t.replace(resetRegex,styles.reset+s)+styles.reset;return n.config.optimizeStyles.chain?optimizeStyles(r):r};return Object.setPrototypeOf(n,crayonPrototype),n.preserveCache=!!e,n.styleCache=t||"",n};const resetRegex=/\x1b\[0m/gi;const literalStyleRegex=/{([^\s]+\s)([^{}]+)}/;const literalFuncRegex=/(\w+)\((.*)\)/;const literalStringRegex=/^("|'|`)(.*)\1$/;const compileLiteral=(...e)=>{const t=e.slice(1);const s=[...e[0]];let r="";for(;t.length||s.length;)s.length&&(r+=s.shift()),t.length&&(r+=t.shift());let n=r.match(literalStyleRegex);for(;null!==n&&void 0!==n&&n.length;){const o=n[1].trimEnd().split(".").map(e=>{const t=styles[e];if(t)return t;{const s=e.match(literalFuncRegex);if(null!==s&&void 0!==s&&s.length){const r=s[1];const n=s[2].split(",").map(e=>{const t=e.match(literalStringRegex);if(null!=t&&t.length)return t[2];const s=Number(e);return s||("false"===e||"true"===e?Boolean(e):e)});if(r.startsWith("bg")){const o=r[2].toLowerCase()+r.replace("bg","").substr(1);const l=functions[r]||(n.push(!0),functions[o]);if(l)return l(...n)}else{const i=functions[r];if(i)return i(...n)}}}}).join("");const l=n[2].split(styles.reset).join(styles.reset+o);r=r.replace(n[0],o+l+styles.reset),n=r.match(literalStyleRegex)}return r};const crayonInstance=buildCrayon(!1);export default crayonInstance;export{reloadStyles,reloadFunctions,addStyleFunction,addStyleAliases,optimizeStyles,addStyleAlias,addStyles,addStyle,functions,styles};